#include <iostream>
#include <memory>
#include <mutex>
#include <thread>

class singleton{
    private:
    static std::unique_ptr<singleton> instance;
    static std::once_flag isInstantiated;
    singleton() {std::cout<<"instance created"<<std::endl;}
    
    public:
    static singleton& createInstance(){
        std::call_once(isInstantiated , [](){
            instance.reset(new singleton());
        });
        return *instance;
    }
    
    static void logger(const std::string& message){
        std::cout<<std::this_thread::get_id()<<" "<<message<<std::endl;
    }
};

std::unique_ptr<singleton> singleton::instance;
std::once_flag singleton::isInstantiated;

void threadFunction(const std::string& message){
    singleton::createInstance().logger(message);
}

int main()
{
    std::thread t1(threadFunction, "one");
    std::thread t2(threadFunction, "two");
    std::thread t3(threadFunction, "three");
    
    t1.join();
    t2.join();
    t3.join();
    return 0;
}
